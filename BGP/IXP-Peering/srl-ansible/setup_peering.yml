---

#
# Sample Ansible playbook to configure BGP peering based on PeeringDB and IRR database queries
#
# Before using: ansible-galaxy collection install nokia.srlinux
#

- name: Configure SR Linux BGP peering
  # hosts: srlinux
  # hosts: Twitter, Apple
  hosts: Apple
  gather_facts: False
  tasks:
  - block: # Requests are throttled if too frequent
    - name: Retrieve node IP addresses at given IXP site
      ansible.builtin.uri:
       url: https://peeringdb.com/api/netixlan?asn={{ bgp.as }}&name__contains={{ IXP_SITE | urlencode }}
       return_content: true
      register: node_ips
    - debug: var=node_ips
    - name: For each peer, retrieve peering IP addresses at given IXP site
      ansible.builtin.uri:
       url: https://peeringdb.com/api/netixlan?asn={{ item.as }}&name__contains={{ IXP_SITE | urlencode }}
       return_content: true
      register: peer_ips
      loop: "{{ bgp.neighbors }}"
    - name: Retrieve list of IP prefixes exported by each peer AS
      ansible.builtin.uri:
       url: https://irrexplorer.nlnog.net/api/prefixes/asn/AS{{ item.as }}
       return_content: true
      register: peer_prefixes
      loop: "{{ bgp.neighbors }}"
      tags: prefixes

    delegate_to: localhost
    vars:
      IXP_SITE: "{{ hostvars['DE-CIX']['ixp'] }}"

  - debug: var=peer_ips.results[0]
  - debug: var=peer_prefixes.results[0].json.directOrigin[0]

  - block:
    - name: Provision node peering IPs using the Ansible collection
      vars:
       n: "{{ node_ips.json.data[0] }}" # Pick only first IP pair
       updates: |
        {%- for v,ip in [('4',n.ipaddr4),('6',n.ipaddr6)] -%}
        {% if ip %}
        - path: /interface[name=ethernet-1/1]/subinterface[index=0]
          value:
           description: "Provisioned through Ansible"
           ipv{{v}}:
            admin-state: "enable"
            address:
            - ip-prefix: "{{ ip }}/{{ 22 if v=='4' else 64 }}"
              primary: [null] # BGP peering only on primary IP
        {% endif %}
        {%- endfor -%}
      nokia.srlinux.config:
       update: "{{ updates | from_yaml }}"
      register: set_ip_response
      # with_items: "{{ node_ips.json.data }}"

    - name: Provision BGP prefix list per AS using the Ansible collection
      vars:
       updates: |
        {% for v in ('4','6') %}
        - path: /routing-policy/prefix-set[name=as{{ item.item.as }}_v{{ v }}]
          value:
           prefix: []
        {% endfor %}
        {% for p in item.json.directOrigin %}
        {%  if p.rpkiRoutes != [] %}
        - path: /routing-policy/prefix-set[name=as{{ item.item.as }}_v{{ '4' if p.prefix|ipv4 else '6' }}]
          value:
           prefix:
           - ip-prefix: {{ p.prefix }}
             mask-length-range: "exact"
             _annotate: "Origin AS {{ p.rpkiRoutes[0].asn }}"
        {%  endif %}
        {% endfor %}
      nokia.srlinux.config:
       update: "{{ updates | from_yaml }}"
      register: set_response
      with_items: "{{ peer_prefixes.results }}"
      tags: prefixes

    - name: Provision BGP peers using the Ansible collection
      vars:
       peer: "{{ item[1] }}"
       updates: |
        {% for ip in (peer.ipaddr4,peer.ipaddr6) %}
        {%  if ip %}
        {%   set policy_name = "as" + item[0].item.as|string + "_v" + ('4' if ip|ipv4 else '6') %}
        - path: /routing-policy/policy[name={{ policy_name }}_import]
          value:
           default-action:
            policy-result: "reject"
           statement:
           - name: "Accept RPKI validated prefixes"
             match:
              prefix-set: "{{ policy_name }}"
             action:
              policy-result: "accept"
        - path: /network-instance[name=default]/protocols/bgp/neighbor[peer-address={{ip}}]
          value:
           peer-as: "{{ peer.asn }}"
           peer-group: "ebgp" # TODO create this too
           import-policy: "{{ policy_name }}_import"
           description: "Provisioned through Ansible"
        {%  endif %}
        {% endfor %}
      nokia.srlinux.config:
       update: "{{ updates | from_yaml }}"
      register: set_response
      with_subelements:
      - "{{ peer_ips.results }}"
      - json.data

    vars:
      ansible_connection: ansible.netcommon.httpapi
      ansible_network_os: nokia.srlinux.srlinux
      ansible_httpapi_ciphers: ECDHE-RSA-AES256-SHA
