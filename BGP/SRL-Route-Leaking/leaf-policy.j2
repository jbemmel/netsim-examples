{% if vrfs is defined %}

updates:

{# Create no-advertise community #}
- path: routing-policy/community-set[name=no-advertise]
  val:
   member: [ "no-advertise" ]

{# Create per-customer prefix lists, named using their community #}
{% for vname, vdata in topology.vlans.items() if vdata.vrf is defined and vdata.prefix is defined %}
{% set community = topology.vrfs[vdata.vrf].export[0] %}
- path: routing-policy/prefix-set[name=C{{ community|replace(':','_') }}]
  val:
   prefix:
   - ip-prefix: {{ vdata.prefix.ipv4 }}
     mask-length-range: exact
{% endfor %}

{% for vname,vdata in vrfs.items() if 'global' not in vname %}
- path: routing-policy/policy[name={{vname}}_ebgp_export_new]
  val:
   default-action:
    accept:
     bgp:
      communities:
       replace: {{ vname }}_export

- path: routing-policy/policy[name={{vname}}_ebgp_import_new]
  val:
   default-action:
    reject: { }
   statement:
{%  for c in vdata.import|default([]) %}
   - sequence-id: {{ 10 + loop.index }}
     match:
      prefix-set: "C{{ c|replace(':','_') }}"
      # bgp:
      #  community-set: "C{{ c|replace(':','_') }}"
     action:
      accept:
       bgp:
        communities:
         add: no-advertise  # Don't advertise these leaked prefixes
{%  endfor %}

- path: network-instance[name={{vname}}]/protocols/bgp
  val:
   export-policy: "{{vname}}_ebgp_export_new"
   import-policy: "{{vname}}_ebgp_import_new"

{% endfor %}

{% if 'leaf_global' in vrfs %}

{# Reduce local preference for routes received via selfloop, has no effect on route selection #}
- path: routing-policy/policy[name=selfloop_import_reduce_localpref]
  val:
   default-action:
    accept:
      bgp:
       local-preference:
        set: 99  # Reduced from default 100

- path: network-instance[name=leaf_global]/protocols/bgp
  val:
   export-policy: accept_all
   import-policy: selfloop_import_reduce_localpref

{% endif %}

{% endif %}
