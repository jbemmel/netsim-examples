## Testing topology for iBGP over eBGP with SR Linux

addressing:
  fabric:
    # unnumbered: true # old style
    ipv4: true
    ipv6: true

bgp:
  as: 64999
  # sessions: # Transport sessions to use, use defaults
  #  ipv4: [ ibgp ] # IBGP-v4 over EBGP-v6
  #  ipv6: [ ebgp ]
  activate: # Address families to activate
    ipv4: [ ebgp ] # Only activate ipv4 over eBGP, use iBGP for EVPN only

provider: clab

groups:
  hosts:
    members: [ h1, h2, h3, h4 ]
    device: frr
    # module: [ bgp, evpn, vxlan, vlan, vrf ]
    module: [ bgp,evpn,vlan,vrf,vxlan ]
  switches:
    members: [ spine, leaf1, leaf2 ]
    device: srlinux
    module: [ vlan,vxlan,bgp,evpn,vrf ]

vrfs:
  red:
    evpn.transit_vni: true # enable symmetric irb
    loopback: True
    # af:
    #  ipv4: True # Should be triggered by loopback interfaces being added - but isn't
  blue:

vlans:
  red:
    mode: irb # 'route' looses vlan.access (name of vlan) to lookup VXLAN-only
    vrf: red
  blue:
    mode: bridge
    vrf: blue
    prefix: 200.0.0.0/24
  underlay:
    mode: route
    # vrf: default
    pool: fabric # -> results in ipv4: 'True'

vxlan.vlans: [ red, blue ]

# plugin: [ ebgp.utils] # Enables bgp.default_originate: True

nodes:
  spine:
    module: [ bgp,evpn ]
    bgp:
      local_as: 65000
      rr: True
      originate: [ 10.0.0.0/24 ] # Originate a route for all loopbacks, such that hosts know where to send
  leaf1:
    bgp.local_as: 65001
  leaf2:
    bgp.local_as: 65002

  h1:
    bgp.local_as: 65003 # Cannot be same as overlay, else AS loop
  h2:
    bgp.local_as: 65003 # Same for all hosts -> hosts do not accept specific routes to other hosts, only default
  h3:
    module: [bgp] # No vlans or vxlan
  h4:
    module: [bgp,vlan,vrf] # vrf module not pulled in automatically by vlan.vrf

links:
- h1:
  leaf1:
    vlan.access: underlay
  role: fabric

- h1: # Stub link to emulate a host in the overlay
  prefix: 123.0.0.0/24
  # vrf: red
  vlan.access: red # In VRF red
  type: stub # else it becomes 'lan', default type for vlans

- h2:
  leaf2:
    vlan.access: underlay

- h2: # Stub link to emulate a host in the overlay
  # vrf: blue
  vlan.access: blue # In VRF blue, l2 only
  type: stub

- h3:
  leaf1:
    vlan.access: red

- h4:
  leaf2:
  vlan.trunk: [ red, blue ] # This pulls in the vlans and vrfs

- h4: # Stub link
  vlan.access: blue
  type: stub

- spine:
   ifindex: 49
  leaf1:
   ifindex: 49
  role: fabric
- spine:
   ifindex: 50
  leaf2:
   ifindex: 49
  role: fabric
