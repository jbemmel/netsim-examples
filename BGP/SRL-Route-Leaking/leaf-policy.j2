{% if vrfs is defined %}

delete:
{% for vname in vrfs if vname!='global' %}
- routing-policy/policy[name={{vname}}_export]
- routing-policy/policy[name={{vname}}_import]
{% endfor %}

updates:

{# Create no-advertise community #}
- path: routing-policy/community-set[name=no-advertise]
  val:
   member: [ "no-advertise" ]

{% for vname,vdata in vrfs.items() if vname!='global' %}
- path: routing-policy/policy[name={{vname}}_export]
  val:  
   default-action:
    accept:
     bgp:
      communities:
       replace: {{ vname }}_export

- path: routing-policy/policy[name={{vname}}_import]
  val:
   default-action: 
    reject: { }
   statement:
{%  for c in vdata.import|default([]) %}
   - sequence-id: {{ 10 + loop.index }}
     match:
      bgp:
       community-set: "C{{ c|replace(':','_') }}"
     action:
      accept:
       bgp:
        communities:
         add: no-advertise  # Don't advertise these leaked prefixes
{%  endfor %}
{% endfor %}

{% if 'global' in vrfs %}

{# Reduce local preference for routes received via selfloop, has no effect on route selection #}
- path: routing-policy/policy[name=selfloop_import_reduce_localpref]
  val:
   default-action:
    accept:
      bgp:
       local-preference: 
        set: 99  # Reduced from default 100

{% for n in vrfs['global'].bgp.neighbors if n.ipv4_rfc8950|default(0) %}
- path: network-instance[name=global]/protocols/bgp/group[group-name=ebgp-unnumbered-{{n.local_as}}]
  val:
   export-policy: accept_all
   import-policy: selfloop_import_reduce_localpref
{% endfor %}
{% endif %}

{% endif %}